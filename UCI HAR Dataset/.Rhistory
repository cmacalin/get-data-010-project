unique(c(3, 4, 5, 5, 5, 6, 6))
lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
lapply(unique_vals, length)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
name(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0, 1), 100, prob = c(0.3, 0.7))
flips <- sample(c(0, 1), 100, prob = c(0.3, 0.7), replace = TRUE)
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
flips2 <- rbinom(100, size = 2, prob = 0.7)
flips2 <- rbinom(100, size = 2, prob = c(0.7, 0.3)
)
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpois
rpois(5)
rpois(5, lambda = 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
str("Hi", "wo")
?str
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
library(datasets)
data(iris)
?iris
iris
check <- iris[iris$Species == "virginica"]
check <- iris[ ,iris$Species == "virginica"]
check <- iris[iris$Species == "virginica", ]
check
colMeans(iris$Sepal.Length)
mean(check$Sepal.Length)
apply(iris, 1, mean)
colMeans(iris)
apply(iris, 2, mean)
apply(iris, [,1:4], 2, mean)
apply(iris[,1:4], 2, mean)
data(mtcars)
mtcars
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
?with
?tapply
tapply(mpg, cyl, mean)
tapply(iris, mpg, cyl, mean)
with(mtcars, tapply(hp, cyl, mean))
debub(ls)
debug(ls)
ls
ls
exit
set.seed(1)
rpois(5,2)
set.seed(10)
x <- rbinom(10,10,0.5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
y
x
e
?profiler
library(datasets)
Rprof()
fit <- lm(y ~ x1 +x2)
?lm
summaryRprof()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringAsFactors=FALSE)
mydf <- read.csv(path2csv, stringsAsFactors=FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
(-5:20)
-(5:20)
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r_version=="3.1.1", country=="US")
?Comparison
filter(cran, r_version<="3.0.2", country=="IN")
filter(cran, country=="US"| country=="IN")
filter(cran, size > 100500 & r_os == "linux-gnu")
filter(cran, size > 100500 , r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran,!is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version),ip_id)
cran3 <- select(cran,l ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes=mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
head(top_conuts, 20)
head(top_counts, 20)
arrange(top_counts, desc(count))
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
top_unique
arrange(top_unique, desc(unique))
submit()
submit()
submit()
submit()()
submit()
submit()
submit()
submit()
submit()
setwd("~/Documents/Coursera/Getting and Cleaning Data/Course Project")
setwd("UCI HAR Dataset")
train_data = read.table("/test/subject_train.txt")
train_data = read.table("test/subject_train.txt")
train_data = read.table("~/test/subject_train.txt")
dir()
dir("/test/subject_train.txt")
dir("/test/subject_train.txt/")
dir("/test/subject_train.txt")
dir("/test/")
dir("test")
train_data = read.table("/test/subject_train.txt")
train_data = read.table("/train/subject_train.txt")
train_data = read.table("train/subject_train.txt")
test_data = read.table("test/subject_test.txt")
View(test_data)
View(train_data)
tail(test_data)
tail(train_data)
y_train = read.table("train/y_train.txt")
x_train = read.table("train/X_train.txt")
View(y_train)
View(x_train)
features = read.table("features.txt")
View(features)
View(features)
activity_labels = read.table("activity_labels.txt")
View(activity_labels)
activity_labels[1]
activity_labels[,1]
activity_labels$V2
activity_labels$V2[1]
subject_train = read.table("train/subject_train.txt")
subject_test = read.table("test/subject_test.txt")
y_test = read.table("test/y_test.txt")
x_test = read.table("test/x_test.txt")
testing <- y_train
?replace
?sub
?gsub
testing <- mapply(gsub, [1:6], activity_labels$V2, testing)
testing <- mapply(gsub, c("1","2","3","4","5","6"), activity_labels$V2, testing)
View(testing)
View(testing)
?rbind
train <- cbind(subject_train,y_train,x_train)
View(train)
?colnames
train_data <- train
test_data <- cbind(subject_test, y_test, x_test)
View(train_data)
View(test_data)
check <- merge(train_data, test_data)
?merge
class(train_data)
check <- merge(train_data, test_data, by.y)
check <- merge(train_data, test_data, by.y=TRUE)
?union
check <- rbind(train_data, test_data)
View(check)
tail(check)
tail(test_data)
?std_dev
?std
?sd
?colMeans
colMeans(check)
?sapply
sapply(check, sd)
head(sapply(check, sd))
head(sapply(check[2:], sd))
head(sapply(check[2::], sd))
head(sapply(check[2:,], sd))
?like
?grepl
testing_labels <- factor(testing, labels=c("a","b","c","d","e","f"))
testing_labels <- factor(testing, labels=activity_labels$V2)
?category
testing_labels <- factor(testing, labels=activity_labels$V2, ordered=FALSE)
?regexp
View(features)
?subset
?grepl
features_sub <- features[,grepl("mean()|std()", features$V2)]
features_sub <- features[grepl("mean()|std()", features$V2), ]
View(features_sub)
features_sub <- features[grepl("-mean()|-std()", features$V2), ]
features_sub <- features[grepl("-mean()|-std()", features$V2, fixed=TRUE), ]
View(features_sub)
features_sub <- features[grepl("mean()|std()", features$V2), ]
View(features_sub)
features_sub <- features[grepl("mean|std", features$V2), ]
features_sub <- features[grepl("mean\\(\\)|std\\(\\)", features$V2), ]
View(features_sub)
features_sub <- features[grep("mean\\(\\)|std\\(\\)", features$V2), ]
View(features_sub)
head(features_sub$V1)
tail(features_sub$V1)
names(features_sub)
?read.table
x_train <- read.table("train/x_train.txt", colClasses=features[grepl("mean\\(\\)|std\\(\\)", features$V2), ])
x_train <- read.table("train/x_train.txt")
x_train <- read.table("train/x_train.txt", colClasses=features[grep("mean\\(\\)|std\\(\\)", features$V2), ])
x_train_test <- read.table("train/x_train.txt", colClasses=features[grep("mean\\(\\)|std\\(\\)", features$V2), ])
x_train_test <- x_train
testX <- x_train
checkTest <- testX[,c(1,2,3,4,5)]
checkTest <- testX[,as.numeric(features_sub$V1)]
features_index <- features_sub$V1
combined_data <- combined_data[,features_index]
trainTest <- train_data
testTest <- test_data
combinedTest <- merge(train_data, test_data)
combinedTest <- merge(train_data, test_data, by="V1")
View(features)
features <- read.table("features.txt", col.names=c("Index", "Feature"))
View(features)
getwd()
features <- read.table("features.txt", col.names=c("Index", "Feature"))
View(features)
subject_train <- read.table("train/subject_train.txt", col.names=c("Subject"))
View(subject_train)
y_train <- read.table("train/y_train.txt", col.names("Activity.Label"))
y_train <- read.table("train/y_train.txt", col.names=c("Activity.Label"))
View(y_train)
subject_test <- read.table("test/subject_test.txt", col.names=c("Subject"))
View(subject_test)
y_test <- read.table("test/y_test.txt", col.names=c("Activity.Label"))
View(y_test)
x_test <- read.table("test/x_test.txt", col.names=features$Feature)
x_train <- read.table("train/x_train.txt", col.names=features$Feature)
View(x_test)
train_data <- cbind(subject_train, y_train, x_train)
View(train_data)
View(x_train)
test_data <- cbind(subject_test, y_test, x_test)
combined_data <- rbind(train_data, test_data)
features_sub <- features[grepl("mean\\(\\)|std\\(\\)", features$Feature), ]
View(features_sub)
features_index <- features_sub$V1
combined_data <- combined_data[,features_sub$Index]
View(combined_data)
?melt
install.packages("reshape2")
load(reshape2)
library(reshape2)
?melt
install.packages("plyr")
install.packages("plyr")
install.packages("dplyr")
library(dplyr)
activity_labels <- read.table("activity_labels.txt", col.names=c("Activity.Label","Activity"))
View(activity_labels)
testMerge <- merge(combinedData, activity_labels, by="Activity.Label")
testMerge <- merge(combined_data, activity_labels, by="Activity.Label")
View(testMerge)
doublecheck <- cbind(testMerge$Activity.Label, testMerge$Activity)
testMerge <- merge(activity_labels, combined_data, by="Activity.Label")
View(testMerge)
doublecheck <- cbind(testMerge$Activity.Label, testMerge$Activity)
View(doublecheck)
View(testMerge)
doublecheck <- c(testMerge$Activity.Label, testMerge$Activity)
doublecheck <- rbind(testMerge$Activity.Label, testMerge$Activity)
View(doublecheck)
head(testMerge$Activity.Label)
head(testMerge$Activity.Label, n=3000)
head(testMerge$Activity, n=1670)
head(testMerge$Activity, n=1675)
head(testMerge$Activity, n=1700)
head(testMerge$Activity, n=2700)
summary(testMerge$Activity.Label)
table(testMerge$Activity.Label)
table(testMerge$Activity)
View(activity_labels)
combined_data <- merge(activity_labels, combined_data, by="Activity.Label")
View(combined_data)
names(combined_data)
testString <- "tBodyAccJerk-max()-Y"
?split
?strsplit
strsplit(testString)
strsplit(testString, testString)
strsplit(testString, "-")
View(features)
?sapply
testSplit <- sapply(features$Feature, strsplit, split="-")
class(features$Feature[1])
testSplit <- sapply(as.character(features$Feature), strsplit, split="-")
head(testSplit)
testSplit[,1]
testSplit[1,]
testSplit[1]
testSplit[1][1]
testSplit[1][1,]
testSplit[1][,1]
testSplit[1][1][1]
testSplit[1,1]
testSplit[1][1,1]
class(testSplit[1])
names(testSplit[1])
names(testSplit[1],sep=".")
rbind(testSplit)
uh <- rbind(testSplit)
delete(uh)
?remove
remove(uh)
remove(doublecheck)
remove(testMerge)
remove(features_index)
remove(testString)
remove(testSplit)
featureSplit <- apply(as.character(features$Feature), strsplit, split="-")
featureSplit <- lapply(as.character(features$Feature), strsplit, split="-")
head(featureSplit)
featureSplit <- sapply(as.character(features$Feature), strsplit, split="-")
featureSplit <- as.matrix(featureSplit)
View(featureSplit)
featureSplit <- sapply(as.character(features$Feature), strsplit, split="-")
featureSplit <- data.frame(featureSplit)
featureSplit <- data.table(featureSplit)
featureSplit <- rlist(featureSplit)
featureSplit <- c(featureSplit)
head(featureSplit)
uh <- c(featureSplit$V1)
featureSplit <- sapply(as.character(features$Feature), strsplit, split="-")
as.matrix(featureSplit[,1])
as.matrix(featureSplit[1,])
as.matrix(featureSplit)
featureSplit <- as.matrix(featureSplit)
head(featureSplit$V1)
View(featureSplit)
View(featureSplit[,1])
View(featureSplit[,1])
head(featureSplit[,1])
featureSplit <- mapply(as.character(features$Feature), strsplit, split="-")
featureSplit <- tapply(as.character(features$Feature), strsplit, split="-")
featureSplit <- sapply(as.character(features$Feature), strsplit, split="-")
featureSplit[1]
featureSplit[1][1]
featureSplit[1][1,]
featureSplit[1][1]
featureSplit[1]
size(featureSplit[1])
length(featureSplit[1])
check <- c(1,2,3)
check
check[1]
length(check)
View(combined_data)
summarize
?summarize
testTidy <- ddply(combined_data,.(Activity),summarize,means=colMean(combined_data[,-(c("Activity","Activity.Level","Subject"))]))
library(plyr)
?ddply
testTidy <- ddply(combined_data,.(Activity),summarize,means=colMean(combined_data[,-(c("Activity","Activity.Level","Subject"))]))
testTidy <- ddply(combined_data,.(Activity),summarize,means=colMeans(combined_data[,-(c("Activity","Activity.Level","Subject"))]))
testTidy <- ddply(combined_data,.(Activity),summarize,means=colMeans(combined_data))
class(combined_data[1,4])
summary(combined_data)
check <- colMeans(combined_data[,-(c("Activity.Level","Activity","Subject"))])
check <- colMeans(combined_data[-(c("Activity.Level","Activity","Subject"))])
?split
check <- split(combined_data,Activity)
check <- split(combined_data,"Activity")
head(check)
head(check,n=1)
mean(combined_data)
check <- ddply(combined_data,"Activity",summarize)
check <- ddply(combined_data,"Activity", numcolwise(mean))
check
minus <- head(combined_data[,-(c("Subject"))])
minus <- head(combined_data[-("Subject")])
check2 <- ddply(combined_data,"Subject", numcolwise(mean))
View(check2)
?ddply
check3 <- ddply(combined_data,c("Subject","Activity"), numcolwise(mean))
View(check3)
check3 <- ddply(combined_data,c("Subject","Activity.Label",Activity"), numcolwise(mean))
)
check3 <- ddply(combined_data,c("Subject","Activity.Label","Activity"), numcolwise(mean))
View(check3)
tidyDaya <- ddply(combined_data,c("Subject","Activity.Label","Activity"), numcolwise(mean))
tidyData <- ddply(combined_data,c("Subject","Activity.Label","Activity"), numcolwise(mean))
remove(tidyDaya)
remove(check3)
remove(check2)
remove(check)
remove(uh)
remove(featureSplit)
?numcolwise
?ddply
?write.table
class(tidyData)
write.table(tidyData, file="HAR_tidy_dataset.txt", row.names=FALSE)
dataCheck <- read.table("HAR_tidy_dataset.txt", header = TRUE)
View(dataCheck)
View(tidyData)
?Rscript
